# if entity is 'World', set entity_type to 'World,
# if code is not na, set entity_type to 'Country',
# if code is na and entity contains the characters 'SDI', set entity_type as 'SDI',
# if code is na and entity contains a list of income/demographic terms, set entity)type as 'Income/Demographic'
set_entity_type <- function(df, income_demo) {
df <- df  %>% mutate(entity_type = case_when(
df$entity == 'World' ~ 'World',
!is.na(df$code) ~ 'Country',
is.na(df$code) & grepl('SDI', df$entity) ~ 'SDI',
is.na(df$code) & df$entity %in% income_demo ~ 'Income/Demographic',
TRUE ~ 'Region' # else statement
))
return(df)
}
# set_uk_code: function to set code as 'GBR' if code is na and if the entity contains the terms in uk_entity list
set_uk_code <- function(df, uk_entity) {
df[(is.na(df$code)) & (df$entity %in% uk_entity),
"code"] <- 'GBR'
return(df)
}
# shorten long column name
rename_cols<- function(dataset){
col_names<- colnames(dataset)
if (
'Deaths...Malaria...Sex..Both...Age..Age.standardized..Rate...per.100.000.people.' %in% col_names
) {
dataset <- rename(
dataset,
age_std_death_rate = Deaths...Malaria...Sex..Both...Age..Age.standardized..Rate...per.100.000.people.
)
}
else if (
'Incidence.of.malaria..per.1.000.population.at.risk...per.1.000.population.at.risk.' %in% col_names
) {
dataset <- rename(
dataset,
malaria_incidence_1000 = Incidence.of.malaria..per.1.000.population.at.risk...per.1.000.population.at.risk.
)
}
return (dataset)
}
# Import libraries
library(dplyr)
library(gsubfn)
# read config variables
source("../config/config.R")
filepaths <- get_csv_paths('../data')
# using gsubfn package to return multiple variables from the function
list[deaths, deaths_age, inc] <- read_csv_files(filepaths)
colnames(inc)
inc<-rename_cols(inc)
colnames(inc)
knitr::opts_chunk$set(echo = TRUE)
# Import libraries
library(dplyr)
library(gsubfn)
# read config variables
source("../config/config.R")
filepaths <- get_csv_paths('../data')
# save as csv files
write.csv(deaths, '../data/processed/R/malaria_deaths_processed.csv', row.names = FALSE)
# get a list of csv file paths from the data folder
get_csv_paths<- function(folder_path) {
filepaths <- list.files(
path = folder_path,
pattern = "*.csv",
full.names = TRUE
)
return (filepaths)
}
# loop through each csv file in the folder, read csv file as specific variables based on file name
# each csv file has different processing requirements, hence they have to be read into pre-defined variables
read_csv_files <- function(filepaths){
for (file in filepaths) {
# reading malaria_deaths.csv file
if (grepl('malaria_deaths.csv', file)) {
deaths<- read.csv(
file,
na.strings=c("NA","NaN", " ", "")
)
}
# reading malaria_deaths_age.csv file
else if (grepl('malaria_deaths_age.csv', file)) {
deaths_age<-read.csv(
file,
na.strings=c("NA","NaN", " ", "")
)
}
# reading malaria_inc.csv file
else if (grepl('malaria_inc.csv', file)) {
inc<-read.csv(
file,
na.strings=c("NA","NaN", " ", "")
)
}
else {
print('no relevant files found - please check data folder')
}
}
return(list(deaths, deaths_age, inc))
}
# set_entity_type: function to set the entity_type based on multiple conditions:
# if entity is 'World', set entity_type to 'World,
# if code is not na, set entity_type to 'Country',
# if code is na and entity contains the characters 'SDI', set entity_type as 'SDI',
# if code is na and entity contains a list of income/demographic terms, set entity)type as 'Income/Demographic'
set_entity_type <- function(df, income_demo) {
df <- df  %>% mutate(entity_type = case_when(
df$entity == 'World' ~ 'World',
!is.na(df$code) ~ 'Country',
is.na(df$code) & grepl('SDI', df$entity) ~ 'SDI',
is.na(df$code) & df$entity %in% income_demo ~ 'Income/Demographic',
TRUE ~ 'Region' # else statement
))
return(df)
}
# set_uk_code: function to set code as 'GBR' if code is na and if the entity contains the terms in uk_entity list
set_uk_code <- function(df, uk_entity) {
df[(is.na(df$code)) & (df$entity %in% uk_entity),
"code"] <- 'GBR'
return(df)
}
# rename specific column names
rename_specific_cols<- function(dataset){
col_names<- colnames(dataset)
if (
'Deaths...Malaria...Sex..Both...Age..Age.standardized..Rate...per.100.000.people.' %in% col_names
) {
dataset <- rename(
dataset,
age_std_death_rate = Deaths...Malaria...Sex..Both...Age..Age.standardized..Rate...per.100.000.people.
)
}
else if (
'Incidence.of.malaria..per.1.000.population.at.risk...per.1.000.population.at.risk.' %in% col_names
) {
dataset <- rename(
dataset,
malaria_incidence_1000 = Incidence.of.malaria..per.1.000.population.at.risk...per.1.000.population.at.risk.
)
}
return (dataset)
}
# Import libraries
library(dplyr)
library(gsubfn)
# read config variables
source("../config/config.R")
filepaths <- get_csv_paths('../data')
# using gsubfn package to return multiple variables from the function
list[deaths, deaths_age, inc] <- read_csv_files(filepaths)
View(deaths)
View(deaths_age)
colnames(inc)
preprocess_inc<- function(inc){
inc_clean<- inc %>%
tolower(names(.)) %>%
rename_specific_cols() %>%
set_uk_code(., uk_entity) %>%
set_entity_type(., income_demo)
return(inc_clean)
}
inc_clean<- preprocess_inc(inc)
preprocess_inc<- function(inc){
inc_clean<- inc %>%
tolower(names(.)) %>%
rename_specific_cols() %>%
set_uk_code(., uk_entity) %>%
set_entity_type(., income_demo)
return(inc_clean)
}
inc_clean<- preprocess_inc(inc)
preprocess_inc<- function(inc){
inc_clean<- inc %>%
tolower(names()) %>%
rename_specific_cols() %>%
set_uk_code(., uk_entity) %>%
set_entity_type(., income_demo)
return(inc_clean)
}
inc_clean<- preprocess_inc(inc)
preprocess_inc<- function(inc){
inc_clean<- inc %>%
tolower(names(.)) %>%
rename_specific_cols() %>%
set_uk_code(., uk_entity) %>%
set_entity_type(., income_demo)
return(inc_clean)
}
inc_clean<- preprocess_inc(inc)
preprocess_inc<- function(inc){
inc_clean<- inc %>%
rename_all(tolower) %>%
rename_specific_cols() %>%
set_uk_code(., uk_entity) %>%
set_entity_type(., income_demo)
return(inc_clean)
}
inc_clean<- preprocess_inc(inc)
View(inc_clean)
View(inc)
View(inc)
View(inc)
View(inc_clean)
View(inc)
View(inc_clean)
View(inc)
# set_entity_type: function to set the entity_type based on multiple conditions:
# if entity is 'World', set entity_type to 'World,
# if code is not na, set entity_type to 'Country',
# if code is na and entity contains the characters 'SDI', set entity_type as 'SDI',
# if code is na and entity contains a list of income/demographic terms, set entity)type as 'Income/Demographic'
set_entity_type <- function(df, income_demo) {
df <- df  %>% mutate(entity_type = case_when(
df$entity == 'World' ~ 'World',
!is.na(df$code) ~ 'Country',
is.na(df$code) & grepl('SDI', df$entity) ~ 'SDI',
is.na(df$code) & df$entity %in% income_demo ~ 'Income/Demographic',
TRUE ~ 'Region' # else statement
))
return(df)
}
# set_uk_code: function to set code as 'GBR' if code is na and if the entity contains the terms in uk_entity list
set_uk_code <- function(df, uk_entity) {
df[(is.na(df$code)) & (df$entity %in% uk_entity),
"code"] <- 'GBR'
return(df)
}
# rename specific column names
rename_specific_cols<- function(dataset){
col_names<- colnames(dataset)
if (
'deaths...malaria...sex..both...age..age.standardized..rate...per.100.000.people.' %in% col_names
) {
dataset <- rename(
dataset,
age_std_death_rate = deaths...malaria...sex..both...age..age.standardized..rate...per.100.000.people.
)
}
else if (
'incidence.of.malaria..per.1.000.population.at.risk...per.1.000.population.at.risk.' %in% col_names
) {
dataset <- rename(
dataset,
malaria_incidence_1000 = incidence.of.malaria..per.1.000.population.at.risk...per.1.000.population.at.risk.
)
}
return (dataset)
}
# get a list of csv file paths from the data folder
get_csv_paths<- function(folder_path) {
filepaths <- list.files(
path = folder_path,
pattern = "*.csv",
full.names = TRUE
)
return (filepaths)
}
# loop through each csv file in the folder, read csv file as specific variables based on file name
# each csv file has different processing requirements, hence they have to be read into pre-defined variables
read_csv_files <- function(filepaths){
for (file in filepaths) {
# reading malaria_deaths.csv file
if (grepl('malaria_deaths.csv', file)) {
deaths<- read.csv(
file,
na.strings=c("NA","NaN", " ", "")
)
}
# reading malaria_deaths_age.csv file
else if (grepl('malaria_deaths_age.csv', file)) {
deaths_age<-read.csv(
file,
na.strings=c("NA","NaN", " ", "")
)
}
# reading malaria_inc.csv file
else if (grepl('malaria_inc.csv', file)) {
inc<-read.csv(
file,
na.strings=c("NA","NaN", " ", "")
)
}
else {
print('no relevant files found - please check data folder')
}
}
return(list(deaths, deaths_age, inc))
}
# get a list of csv file paths from the data folder
get_csv_paths<- function(folder_path) {
filepaths <- list.files(
path = folder_path,
pattern = "*.csv",
full.names = TRUE
)
return (filepaths)
}
# loop through each csv file in the folder, read csv file as specific variables based on file name
# each csv file has different processing requirements, hence they have to be read into pre-defined variables
read_csv_files <- function(filepaths){
for (file in filepaths) {
# reading malaria_deaths.csv file
if (grepl('malaria_deaths.csv', file)) {
deaths<- read.csv(
file,
na.strings=c("NA","NaN", " ", "")
)
}
# reading malaria_deaths_age.csv file
else if (grepl('malaria_deaths_age.csv', file)) {
deaths_age<-read.csv(
file,
na.strings=c("NA","NaN", " ", "")
)
}
# reading malaria_inc.csv file
else if (grepl('malaria_inc.csv', file)) {
inc<-read.csv(
file,
na.strings=c("NA","NaN", " ", "")
)
}
else {
print('no relevant files found - please check data folder')
}
}
return(list(deaths, deaths_age, inc))
}
# set_entity_type: function to set the entity_type based on multiple conditions:
# if entity is 'World', set entity_type to 'World,
# if code is not na, set entity_type to 'Country',
# if code is na and entity contains the characters 'SDI', set entity_type as 'SDI',
# if code is na and entity contains a list of income/demographic terms, set entity)type as 'Income/Demographic'
set_entity_type <- function(df, income_demo) {
df <- df  %>% mutate(entity_type = case_when(
df$entity == 'World' ~ 'World',
!is.na(df$code) ~ 'Country',
is.na(df$code) & grepl('SDI', df$entity) ~ 'SDI',
is.na(df$code) & df$entity %in% income_demo ~ 'Income/Demographic',
TRUE ~ 'Region' # else statement
))
return(df)
}
# set_uk_code: function to set code as 'GBR' if code is na and if the entity contains the terms in uk_entity list
set_uk_code <- function(df, uk_entity) {
df[(is.na(df$code)) & (df$entity %in% uk_entity),
"code"] <- 'GBR'
return(df)
}
# rename specific column names
rename_specific_cols<- function(dataset){
col_names<- colnames(dataset)
if (
'deaths...malaria...sex..both...age..age.standardized..rate...per.100.000.people.' %in% col_names
) {
dataset <- rename(
dataset,
age_std_death_rate = deaths...malaria...sex..both...age..age.standardized..rate...per.100.000.people.
)
}
else if (
'incidence.of.malaria..per.1.000.population.at.risk...per.1.000.population.at.risk.' %in% col_names
) {
dataset <- rename(
dataset,
malaria_incidence_1000 = incidence.of.malaria..per.1.000.population.at.risk...per.1.000.population.at.risk.
)
}
return (dataset)
}
# Import libraries
library(dplyr)
library(gsubfn)
# read config variables
source("../config/config.R")
filepaths <- get_csv_paths('../data')
# using gsubfn package to return multiple variables from the function
list[deaths, deaths_age, inc] <- read_csv_files(filepaths)
colnames(inc)
preprocess_inc<- function(inc){
inc_clean<- inc %>%
rename_all(tolower) %>%
rename_specific_cols() %>%
set_uk_code(., uk_entity) %>%
set_entity_type(., income_demo)
return(inc_clean)
}
inc_clean<- preprocess_inc(inc)
View(inc_clean)
# Checking that column values have not been inadvertently altered in the pipe
identical(inc_clean[['malaria_1000']], inc[['Incidence.of.malaria..per.1.000.population.at.risk...per.1.000.population.at.risk.']])
colnames(inc_clean)
# Checking that column values have not been inadvertently altered in the pipe
identical(inc_clean[['malaria_incidence_1000']], inc[['Incidence.of.malaria..per.1.000.population.at.risk...per.1.000.population.at.risk.']])
# Checking that column values have not been inadvertently altered in the pipe
identical(
inc_clean[['malaria_incidence_1000']],
inc[['Incidence.of.malaria..per.1.000.population.at.risk...per.1.000.population.at.risk.']]
)
# Checking that column values have not been inadvertently altered in the pipe
identical(
inc_clean[['malaria_incidence_1000']],
inc[['Incidence.of.malaria..per.1.000.population.at.risk...per.1.000.population.at.risk.']]
)
identical(
inc_clean[['code']],
inc[['Code']]
)
# Checking that column values have not been inadvertently altered in the pipe
identical(
inc_clean[['malaria_incidence_1000']],
inc[['Incidence.of.malaria..per.1.000.population.at.risk...per.1.000.population.at.risk.']]
)
identical(
inc_clean[['entity']],
inc[['Entity']]
)
identical(
inc_clean[['code']],
inc[['Code']]
)
# Checking that column values have not been inadvertently altered in the pipe
identical(
inc_clean[['malaria_incidence_1000']],
inc[['Incidence.of.malaria..per.1.000.population.at.risk...per.1.000.population.at.risk.']]
)
identical(
inc_clean[['entity']],
inc[['Entity']]
)
identical(
inc_clean[['code']],
inc[['Code']]
)
# Checking that column values have not been inadvertently altered in the pipe
identical(
inc_clean[['malaria_incidence_1000']],
inc[['Incidence.of.malaria..per.1.000.population.at.risk...per.1.000.population.at.risk.']]
)
identical(
inc_clean[['entity']],
inc[['Entity']]
)
identical(
inc_clean[['code']],
inc[['Code']]
)
unique(inc_clean['entity'])
# Checking that column values have not been inadvertently altered in the pipe
identical(
inc_clean[['malaria_incidence_1000']],
inc[['Incidence.of.malaria..per.1.000.population.at.risk...per.1.000.population.at.risk.']]
)
identical(
inc_clean[['entity']],
inc[['Entity']]
)
identical(
inc_clean[['code']],
inc[['Code']]
)
unique(inc_clean['entity_type'])
# Checking that column values have not been inadvertently altered in the pipe
identical(
inc_clean[['malaria_incidence_1000']],
inc[['Incidence.of.malaria..per.1.000.population.at.risk...per.1.000.population.at.risk.']]
)
identical(
inc_clean[['entity']],
inc[['Entity']]
)
identical(
inc_clean[['code']],
inc[['Code']]
)
table(inc_clean['entity_type'])
# Checking that column values have not been inadvertently altered in the pipe
identical(
inc_clean[['malaria_incidence_1000']],
inc[['Incidence.of.malaria..per.1.000.population.at.risk...per.1.000.population.at.risk.']]
)
identical(
inc_clean[['entity']],
inc[['Entity']]
)
identical(
inc_clean[['code']],
inc[['Code']]
)
transpose(table(inc_clean['entity_type']))
# Checking that column values have not been inadvertently altered in the pipe
identical(
inc_clean[['malaria_incidence_1000']],
inc[['Incidence.of.malaria..per.1.000.population.at.risk...per.1.000.population.at.risk.']]
)
identical(
inc_clean[['entity']],
inc[['Entity']]
)
identical(
inc_clean[['code']],
inc[['Code']]
)
table(inc_clean['entity_type'])
Rscript
install.packages("glue")
install.packages("glue")
install.packages("glue")
install.packages("glue")
setwd("C:/Users/PY/Desktop/portfolio/projects/malaria")
setwd("C:/Users/PY/Desktop/portfolio/projects/malaria")
